{"ast":null,"code":"var _jsxFileName = \"/Users/zenghyun/Desktop/frontend/study/react_mini_project/8. mutilple_board_page/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const events = useLoaderData();\n  /*\n  useLoaderData는 내가 loader를 사용한 컴포넌트, \n  즉 동등 수준의 컴포넌트나 그 자식에 해당하는 컴포넌트에서만 사용할 수있다. \n   */\n\n  // if (data.isError) {\n  //   return <p>{data.message}</p>\n  // }\n\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"0qsQ0LJMbp4ZAcOenpedLepO/y4=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch(\"http://localhost:8080/eventsasd\");\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n    // eslint-disable-next-line no-throw-literal\n    throw {\n      message: 'Could not fetch events.'\n    };\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","message","resData","json","$RefreshReg$"],"sources":["/Users/zenghyun/Desktop/frontend/study/react_mini_project/8. mutilple_board_page/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData } from \"react-router-dom\";\n\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n  const events = useLoaderData();\n  /*\n  useLoaderData는 내가 loader를 사용한 컴포넌트, \n  즉 동등 수준의 컴포넌트나 그 자식에 해당하는 컴포넌트에서만 사용할 수있다. \n   */\n\n  // if (data.isError) {\n  //   return <p>{data.message}</p>\n  // }\n\n  return <EventsList events={events} />;\n}\n\nexport default EventsPage;\n\nexport async function loader() {\n  const response = await fetch(\"http://localhost:8080/eventsasd\");\n\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n    // eslint-disable-next-line no-throw-literal\n    throw { message: 'Could not fetch events.'};\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAEhD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,MAAM,GAAGN,aAAa,CAAC,CAAC;EAC9B;AACF;AACA;AACA;;EAEE;EACA;EACA;;EAEA,oBAAOG,OAAA,CAACF,UAAU;IAACK,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvC;AAACL,EAAA,CAZQD,UAAU;EAAA,QACFJ,aAAa;AAAA;AAAAW,EAAA,GADrBP,UAAU;AAcnB,eAAeA,UAAU;AAEzB,OAAO,eAAeQ,MAAMA,CAAA,EAAG;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;EAE/D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA,MAAM;MAAEC,OAAO,EAAE;IAAyB,CAAC;EAC7C,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACrC,OAAOD,OAAO,CAACX,MAAM;EACvB;AACF;AAAC,IAAAK,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}